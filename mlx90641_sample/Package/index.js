const { padImageData, createBitmapFile } = require('./bitmap');


const width = 12;
const height = 16;
/*//{0,0,0}, {0,0,1}, {0,1,0}, {1,1,0}, {1,0,0}, {1,0,1}, {1,1,1}
const colorTable = Buffer.from([
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0x00,
    0x00, 0xFF, 0x00, 0x00,
    0xFF, 0xFF, 0x00, 0x00,
    0xFF, 0x00, 0x00, 0x00,
    0xFF, 0x00, 0xFF, 0x00,
    0xFF, 0xFF, 0xFF, 0x00
  ]);


(async () => {
  var pixels=[65407, 65402, 65397, 65396, 65403, 65390, 65414, 65415, 65430, 61439, 65473, 65457, 65397, 65395, 65406, 65402, 65397, 65395, 65406, 65402, 65391, 65404, 65394, 65393, 65431, 62719, 65478, 65457, 65401, 65401, 65396, 65396, 65401, 65401, 65396, 65396, 65405, 65394, 65395, 65402, 65406, 65509, 65438, 65443, 65395, 65395, 65393, 65393, 65395, 65395, 65393, 65393, 65398, 65391, 65393, 65401, 65413, 65425, 65430, 65428, 65395, 65387, 65393, 65390, 65395, 65387, 65393, 65390, 65402, 65399, 65409, 65416, 65425, 65421, 65430, 65444, 65403, 65394, 65401, 65398, 65403, 65394, 65401, 65398, 65396, 65406, 65419, 65436, 65436, 65437, 65467, 65462, 65388, 65397, 65390, 65398, 65388, 65397, 65390, 65398, 65390, 65413, 65507, 65475, 65444, 65476, 65524, 65526, 65396, 65398, 65393, 65391, 65396, 65398, 65393, 65391, 65429, 62975, 50431, 65470, 65491, 65532, 43263, 19967, 65398, 65391, 65400, 65402, 65398, 65391, 65400, 65402, 65508, 47359, 43263, 65470, 51711, 58623, 8191, 767, 65400, 65392, 65390, 65405, 65400, 65392, 65390, 65405, 64767, 40191, 35839, 65481, 36351, 19455, 1023, 2559, 65396, 65387, 65401, 65406, 65396, 65387, 65401, 65406, 65518, 35839, 37119, 65483, 38399, 25599, 25343, 27903, 65402, 65404, 65390, 65404, 65402, 65404, 65390, 65404, 65443, 49663, 48383, 65464, 51455, 41727, 39423, 38911, 65404, 65388, 65396, 65399];
  var image=[];
  var max=0;
  for (i=0;i<192;i++) {
    
    image[i*3+1]=Math.floor (pixels[i]/(256*256));
    image[i*3]=Math.floor ((pixels[i] % (256*256))/(256));
    image[i*3+2]=Math.floor (((pixels[i]-image[i*3]*256)%256));
    //image[i*3+2]=0xFF;
    if (image[i*3+1]>max)max=image[i*3+1];
  }

  console.log(max)
  const imageData = padImageData({
    unpaddedImageData: Buffer.from(image),
    width,
    height
  });

await createBitmapFile({
  filename: "checkers.bmp",
  imageData,
  width,
  height,
  bitsPerPixel: 24
});

})();
*/

var fs = require('fs'),
    PNG = require('pngjs').PNG;
var pixels=[65406, 65415, 65423, 65412, 65422, 65400, 65417, 65408, 65436, 65439, 65472, 65481, 65404, 65408, 65407, 65408, 65404, 65405, 65415, 65411, 65429, 65452, 65456, 65470, 65404, 65413, 65411, 65408, 65417, 65409, 65410, 65417, 65427, 65449, 65468, 65468, 65405, 65408, 65411, 65412, 65410, 65411, 65428, 65468, 65446, 65451, 65499, 65502, 65393, 65402, 65402, 65407, 65411, 65409, 65447, 65489, 65452, 65461, 65529, 65528, 65399, 65398, 65398, 65398, 65403, 65405, 65462, 65513, 65480, 65424, 65523, 59391, 65408, 65406, 65399, 65395, 65414, 65408, 65467, 65519, 65500, 65438, 65490, 65279, 65403, 65403, 65405, 65398, 65407, 65412, 65460, 65516, 65521, 65466, 65446, 65512, 65401, 65406, 65402, 65399, 65397, 65403, 65430, 65505, 65522, 65505, 65443, 65472, 65402, 65403, 65399, 65398, 65394, 65403, 65406, 65493, 65517, 65523, 65475, 65432, 65414, 65406, 65408, 65413, 65409, 65411, 65408, 65468, 65502, 65515, 65507, 65467, 65414, 65405, 65409, 65400, 65398, 65403, 65415, 65446, 65495, 65496, 65510, 65501, 65413, 65414, 65403, 65392, 65393, 65403, 65417, 65424, 65473, 65478, 65465, 65468, 65404, 65398, 65400, 65397, 65404, 65397, 65411, 65414, 65427, 65424, 65417, 65421, 65420, 65410, 65410, 65412, 65410, 65408, 65419, 65451, 65413, 65417, 65416, 65409, 65431, 65422, 65410, 65407, 65404, 65406, 65420, 65464, 65422, 65420, 65410, 65403];
  


var png = new PNG({
    width: 12,
    height: 16,
    filterType: -1
});
/*
image[i*3+1]=Math.floor (pixels[i]/(256*256));
image[i*3]=Math.floor ((pixels[i] % (256*256))/(256));
image[i*3+2]=Math.floor (((pixels[i]-image[i*3]*256)%256));*/

for (var y = 0; y < png.height; y++) {
    for (var x = 0; x < png.width; x++) {
      var blue=Math.floor (pixels[y*png.width+x]/(256*256));
      var green=Math.floor ((pixels[y*png.width+x] % (256*256))/(256));
      var red=Math.floor (((pixels[y*png.width+x]-green*256)%256));
        var idx = (png.width * y + x) *4;//<<2
        png.data[idx  ] = red; // red
        png.data[idx+1] = green; // green
        png.data[idx+2] = blue; // blue
        png.data[idx+3] = 255; // alpha (0 is transparent)
    }
}

png.pack().pipe(fs.createWriteStream('newOut.png'));